version: 2.1
executors: 
  my-executor:
    docker:
      - image: cimg/openjdk:8.0
        environment:
          - JVM_OPTS: -Xmx3200m
          - TERM: dumb
          - GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2"
      - image: circleci/postgres:9.4
        environment:
          - POSTGRES_USER: postgres
          - POSTGRES_PASSWORD: postgres

jobs:
  build:
    executor:
      name: my-executor

    working_directory: ~/repo

    steps:
      - checkout 
      # 依存関係をダウンロードしてキャッシュする
      - restore_cache:
          keys:
          - v1-dependencies-{{ .Branch }}-{{ checksum "build.gradle" }}
          - v1-dependencies-{{ .Branch }}-
          - v1-dependencies-
      - run: gradle build -x test
      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ .Branch }}-{{ checksum "build.gradle" }}
      # 他のjobでも共有する
      - persist_to_workspace: 
          root: ~/repo
          paths: 
            - .
  
  test:
    executor:
      name: my-executor
    working_directory: ~/repo
    steps:
      - attach_workspace:
          at: ~/repo
      # run tests!
      - run: gradle test

      - store_artifacts:
          path: ./build/reports
          destination: reports

      - store_test_results:
          path: ./build/test-results

  deploy:
    executor:
      name: my-executor
    working_directory: ~/repo
    steps:
      - attach_workspace:
          at: ~/repo
      - add_ssh_keys:
          fingerprints:
            - ${FINGERPRINT}
      - run : sudo apt update
      - run : sudo apt install -y rsync
      - run : mkdir ~/.ssh
      - run : ssh-keyscan ${HOST_NAME} >> ~/.ssh/known_hosts
      - deploy:
          name: deploy
          command: |
            ssh ${USER_NAME}@${HOST_NAME} "sudo service ${APP_NAME} stop"
            rsync -vc ${BUILD_APP} ${USER_NAME}@${HOST_NAME}:${APP_DIR}
            ssh ${USER_NAME}@${HOST_NAME} "sudo service ${APP_NAME} start"

workflows:
  version: 2
  build-and-test:
    jobs:
      - build
      - test:
          requires:
            - build
      - deploy:
          requires:
            - test
          filters:
            branches:
              only:
                - master